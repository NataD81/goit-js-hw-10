{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startButton = document.querySelector('button[data-start]');\n\nstartButton.addEventListener('click', start);\n\nconst term = {\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n  calendar: document.querySelector('#datetime-picker'),\n};\n\nlet userSelectedDate = Date.now();\nstartButton.disabled = true;\nlet currentTime = Date.now();\nlet timerStart = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n\n  onClose(selectedDates) {\n    if (selectedDates[0] < currentTime) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n        startButton.disabled = false;\n      userSelectedDate = selectedDates[0].getTime();\n    }\n  },\n};\n\nflatpickr('input[type=\"text\"]', options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimerFace({ days, hours, minutes, seconds }) {\n  term.days.textContent = addLeadingZero(days);\n  term.hours.textContent = addLeadingZero(hours);\n  term.minutes.textContent = addLeadingZero(minutes);\n  term.seconds.textContent = addLeadingZero(seconds);\n}\n\nfunction start() {\n  timerStart = setInterval(() => {\n    const readout = userSelectedDate - Date.now();\n\n    if (readout < 0) {\n      clearInterval(timerStart);\n      startButton.disabled = true;\n      return;\n    }\n    startButton.disabled = true;\n    term.calendar.disabled = true;\n    updateTimerFace(convertMs(readout));\n  }, 1000);\n}\n\n\n"],"names":["startButton","start","term","userSelectedDate","currentTime","timerStart","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","updateTimerFace","readout"],"mappings":"yHAKA,MAAMA,EAAc,SAAS,cAAc,oBAAoB,EAE/DA,EAAY,iBAAiB,QAASC,CAAK,EAE3C,MAAMC,EAAO,CACX,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,EAChD,SAAU,SAAS,cAAc,kBAAkB,CACrD,EAEA,IAAIC,EAAmB,KAAK,MAC5BH,EAAY,SAAW,GACvB,IAAII,EAAc,KAAK,MACnBC,EAAa,KAEjB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,EAAIH,GACrBI,EAAS,MAAM,CACb,QAAS,oCACjB,CAAO,EACDR,EAAY,SAAW,KAErBA,EAAY,SAAW,GACzBG,EAAmBI,EAAc,CAAC,EAAE,QAAO,EAE9C,CACH,EAEAE,EAAU,qBAAsBH,CAAO,EAEvC,SAASI,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,EAAgB,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1Db,EAAK,KAAK,YAAcc,EAAeJ,CAAI,EAC3CV,EAAK,MAAM,YAAcc,EAAeH,CAAK,EAC7CX,EAAK,QAAQ,YAAcc,EAAeF,CAAO,EACjDZ,EAAK,QAAQ,YAAcc,EAAeD,CAAO,CACnD,CAEA,SAASd,GAAQ,CACfI,EAAa,YAAY,IAAM,CAC7B,MAAMc,EAAUhB,EAAmB,KAAK,IAAG,EAE3C,GAAIgB,EAAU,EAAG,CACf,cAAcd,CAAU,EACxBL,EAAY,SAAW,GACvB,MACD,CACDA,EAAY,SAAW,GACvBE,EAAK,SAAS,SAAW,GACzBgB,EAAgBR,EAAUS,CAAO,CAAC,CACnC,EAAE,GAAI,CACT"}